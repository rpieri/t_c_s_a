# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cashflow-postgres
    environment:
      POSTGRES_DB: cashflow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: cashflow_lancamentos,cashflow_consolidado
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - cashflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  redis:
    image: redis:7-alpine
    container_name: cashflow-redis
    ports:
      - "6379:6379"
    networks:
      - cashflow-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: cashflow-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - cashflow-network
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    
  
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: cashflow-kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
      - "9101:9101"
    networks:
      - cashflow-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cashflow-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - cashflow-network
    environment:
      KAFKA_CLUSTERS_0_NAME: cashflow-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    profiles:
      - monitoring
        
  lancamentos-api:
    build:
      context: ../../..
      dockerfile: scripts/docker/Lancamento.Dockerfile
    container_name: cashflow-lancamentos-api
    ports:
      - "5001:8080"
    networks:
      - cashflow-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=cashflow_lancamentos;Username=postgres;Password=postgres;Port=5432
      - Kafka__Producer__BootstrapServers=kafka:29092
      - Serilog__MinimumLevel=Information
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
  consolidado-api:
    build:
      context: ../../..
      dockerfile: scripts/docker/Consolidado.Dockerfile
    container_name: cashflow-consolidado-api
    ports:
      - "6006:8080"
    networks:
      - cashflow-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=cashflow_consolidado;Username=postgres;Password=postgres;Port=5432
      - ConnectionStrings__Redis=redis:6379
      - Kafka__Consumer__BootstrapServers=kafka:29092
      - Kafka__Consumer__GroupId=consolidado-service
      - Serilog__MinimumLevel=Information
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
  consolidado-worker:
    build:
      context: ../../..
      dockerfile: scripts/docker/ConsolidadoWorker.Dockerfile
    container_name: cashflow-consolidado
    networks:
      - cashflow-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=cashflow_consolidado;Username=postgres;Password=postgres;Port=5432
      - ConnectionStrings__Redis=redis:6379
      - Kafka__Consumer__BootstrapServers=kafka:29092
      - Kafka__Consumer__GroupId=consolidado-service
      - Serilog__MinimumLevel=Information
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
  
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local

networks:
  cashflow-network:
    driver: bridge